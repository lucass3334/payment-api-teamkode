version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # 🔹 Porta interna, Render converte HTTPS -> 8080
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "
      if [[ -f '/app/certificados/sicredi-cert.pem' && -f '/app/certificados/sicredi-key.pem' ]]; then
        echo '✅ Certificados encontrados! Rodando API com SSL.';
        poetry run uvicorn payment_kode_api.app.main:app --host 0.0.0.0 --port 8080 
        --ssl-keyfile /app/certificados/sicredi-key.pem 
        --ssl-certfile /app/certificados/sicredi-cert.pem;
      else
        echo '⚠️ Nenhum certificado encontrado. Rodando API sem SSL.';
        poetry run uvicorn payment_kode_api.app.main:app --host 0.0.0.0 --port 8080;
      fi"
    volumes:
      - ./certs:/app/certificados  # 🔹 Mantemos o volume de certificados
    restart: always

  redis:
    image: redis:7.2
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
    env_file:
      - .env
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "poetry run celery -A payment_kode_api.app.workers.tasks inspect ping || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
    command: >
      sh -c "exec poetry run celery -A payment_kode_api.app.workers.tasks worker --loglevel=info --concurrency=4"
    restart: always

volumes:
  redis_data:
    driver: local
