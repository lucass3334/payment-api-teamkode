version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL}  # ✅ Usa o valor direto do `.env`
      - REDIS_HOST=${REDIS_HOST:-oregon-redis.render.com}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_USERNAME=${REDIS_USERNAME:-red-cuf4esdds78s73fgmgig}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USE_SSL=${REDIS_USE_SSL:-true}
      - REDIS_SSL_CERT_REQS=${REDIS_SSL_CERT_REQS:-CERT_NONE}
      - USE_SANDBOX=${USE_SANDBOX}
      - SICREDI_ENV=${SICREDI_ENV}
      - WEBHOOK_PIX=${WEBHOOK_PIX}
      - PYTHONPATH="/app"
    depends_on:
      redis:
        condition: service_healthy
    command:
      - poetry
      - run
      - uvicorn
      - payment_kode_api.app.main:app
      - --host
      - 0.0.0.0
      - --port
      - "8000"
    restart: always  # ✅ Reinicia automaticamente na nuvem

  redis:
    image: redis:latest
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]  # ✅ Corrigido
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always  # ✅ Redis se mantém ativo

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL}  # ✅ Usa o valor direto do `.env`
      - REDIS_HOST=${REDIS_HOST:-oregon-redis.render.com}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_USERNAME=${REDIS_USERNAME:-red-cuf4esdds78s73fgmgig}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USE_SSL=${REDIS_USE_SSL:-true}
      - REDIS_SSL_CERT_REQS=${REDIS_SSL_CERT_REQS:-CERT_NONE}
      - USE_SANDBOX=${USE_SANDBOX}
      - SICREDI_ENV=${SICREDI_ENV}
      - WEBHOOK_PIX=${WEBHOOK_PIX}
      - PYTHONPATH="/app"
    depends_on:
      redis:
        condition: service_healthy
    entrypoint: ["/app/docker-entrypoint.sh"]  # ✅ Espera Redis estar pronto
    command:
      - poetry
      - run
      - celery
      - -A
      - payment_kode_api.app.workers.tasks  
      - worker
      - --loglevel=info
      - --concurrency=4
    restart: always # ✅ Mantém o worker rodando na nuvem
