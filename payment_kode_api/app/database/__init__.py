# payment_kode_api/app/database/__init__.py

# üîß ATUALIZADO: Definir vari√°vel de controle globalmente
_customers_management_available = False

try:
    # ========== M√âTODOS PRINCIPAIS DO BANCO DE DADOS ==========
    from .database import (
        # Pagamentos
        save_payment,
        get_payment,
        get_payment_by_txid,
        update_payment_status,
        update_payment_status_by_txid,
        get_payments_by_cliente,  # üîß ADICIONADO: Usado nos endpoints de cliente
        
        # Empresas
        save_empresa,
        get_empresa,
        get_empresa_by_token,
        get_empresa_by_chave_pix,
        get_empresa_config,
        
        # Cart√µes
        save_tokenized_card,
        get_tokenized_card,
        delete_tokenized_card,
        get_cards_by_cliente,  # üîß ADICIONADO: Usado nos endpoints de cliente
        
        # Certificados RSA
        get_empresa_certificados,
        save_empresa_certificados,
        
        # Gateways
        atualizar_config_gateway,
        get_empresa_gateways,
        
        # Sicredi
        get_sicredi_token_or_refresh,
        
        # Estat√≠sticas (se existir)
        get_cliente_stats,  # üîß ADICIONADO: Para estat√≠sticas de cliente
    )

    # ========== M√âTODOS DE MAPEAMENTO ASAAS CUSTOMERS ==========
    from .customers import (
        get_asaas_customer,
        save_asaas_customer,
        get_or_create_asaas_customer
    )

    # ========== SUPABASE CLIENT E STORAGE ==========
    from .supabase_client import supabase
    from .supabase_storage import (
        upload_cert_file,
        download_cert_file,
        ensure_folder_exists,
        SUPABASE_BUCKET
    )

except ImportError as e:
    raise RuntimeError(f"Erro cr√≠tico na inicializa√ß√£o do m√≥dulo database: {str(e)}") from e


# ========== CUSTOMERS MANAGEMENT (IMPORT SEPARADO) ==========
try:
    from .customers_management import (
        get_or_create_cliente,
        get_cliente_by_external_id,
        get_cliente_by_cpf_cnpj,
        get_cliente_by_email,
        get_cliente_by_id,
        create_or_update_endereco,
        get_enderecos_cliente,
        get_endereco_principal_cliente,
        update_cliente,
        list_clientes_empresa,
        delete_cliente,
        search_clientes,
        get_cliente_stats_summary,
        extract_customer_data_from_payment,
        # Fun√ß√µes auxiliares
        extract_cpf_cnpj,
        extract_nome,
        extract_telefone,
        has_address_data,
        extract_address_data,
        generate_external_id
    )
    _customers_management_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è M√≥dulo customers_management n√£o dispon√≠vel: {e}")
    _customers_management_available = False
    
    # Definir fun√ß√µes dummy para evitar erros de import
    async def get_or_create_cliente(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_cliente_by_external_id(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_cliente_by_cpf_cnpj(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_cliente_by_email(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_cliente_by_id(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def create_or_update_endereco(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_enderecos_cliente(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_endereco_principal_cliente(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def update_cliente(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def list_clientes_empresa(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def delete_cliente(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def search_clientes(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    async def get_cliente_stats_summary(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def extract_customer_data_from_payment(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def extract_cpf_cnpj(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def extract_nome(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def extract_telefone(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def has_address_data(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def extract_address_data(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")
    def generate_external_id(*args, **kwargs):
        raise NotImplementedError("M√≥dulo customers_management n√£o dispon√≠vel")


# üÜï NOVO: IMPORT CONDICIONAL DAS IMPLEMENTA√á√ïES DE INTERFACE
try:
    from .repositories import (
        PaymentRepository,
        ConfigRepository,
        CardRepository,
        AsaasCustomerRepository,
    )
    _repositories_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è M√≥dulo repositories n√£o dispon√≠vel: {e}")
    _repositories_available = False

try:
    from .customer_repository import (
        CustomerRepository,
        CustomerService,
    )
    _customer_repository_available = True
except ImportError as e:
    print(f"‚ö†Ô∏è M√≥dulo customer_repository n√£o dispon√≠vel: {e}")
    _customer_repository_available = False


def init_database():
    """Configura e valida as conex√µes do m√≥dulo de banco de dados."""
    try:
        # ========== VALIDA√á√ÉO DE M√âTODOS ESSENCIAIS ==========
        required_methods = [
            # Pagamentos
            save_payment,
            get_payment,
            get_payment_by_txid,
            update_payment_status,
            update_payment_status_by_txid,
            
            # Empresas
            save_empresa,
            get_empresa,
            get_empresa_by_token,
            get_empresa_by_chave_pix,
            get_empresa_config,
            
            # Cart√µes
            save_tokenized_card,
            get_tokenized_card,
            delete_tokenized_card,
            
            # Certificados RSA
            get_empresa_certificados,
            save_empresa_certificados,
            
            # Gateways
            atualizar_config_gateway,
            get_empresa_gateways,
            
            # Sicredi
            get_sicredi_token_or_refresh,
            
            # Storage methods
            upload_cert_file,
            download_cert_file,
            ensure_folder_exists,
        ]
        
        # Verificar disponibilidade de customers_management
        if _customers_management_available:
            required_methods.extend([
                get_or_create_cliente,
                get_cliente_by_external_id,
                get_cliente_by_cpf_cnpj,
                get_cliente_by_email,
                get_cliente_by_id,
                create_or_update_endereco,
                get_enderecos_cliente,
                get_endereco_principal_cliente,
                update_cliente,
                list_clientes_empresa,
                delete_cliente,
                search_clientes,
                get_cliente_stats_summary,
                extract_customer_data_from_payment,
            ])
        
        # Verifica√ß√£o mais robusta
        missing_methods = [method.__name__ for method in required_methods if method is None]
        if missing_methods:
            raise ImportError(f"M√©todos essenciais n√£o carregados: {missing_methods}")

        # Verifica√ß√£o da conex√£o Supabase
        if supabase is None:
            raise ImportError("Cliente Supabase n√£o foi inicializado corretamente")

        # ========== LOG DE INICIALIZA√á√ÉO ==========
        print("‚úÖ M√≥dulo database inicializado com sucesso")
        print(f"üì¶ Bucket configurado: {SUPABASE_BUCKET}")
        
        if _customers_management_available:
            print("üë• M√≥dulo customers_management dispon√≠vel")
        else:
            print("‚ö†Ô∏è M√≥dulo customers_management N√ÉO dispon√≠vel")
        
        # üÜï NOVO: Log das implementa√ß√µes de interface
        if _repositories_available:
            print("üîß Implementa√ß√µes de reposit√≥rio dispon√≠veis")
        else:
            print("‚ö†Ô∏è Implementa√ß√µes de reposit√≥rio N√ÉO dispon√≠veis")
            
        if _customer_repository_available:
            print("üë§ Implementa√ß√µes de customer repository dispon√≠veis")
        else:
            print("‚ö†Ô∏è Implementa√ß√µes de customer repository N√ÉO dispon√≠veis")

    except Exception as e:
        print(f"‚ùå Falha na inicializa√ß√£o do database: {str(e)}")
        raise


def shutdown_database():
    """Encerra conex√µes do banco de dados de forma segura."""
    try:
        # Supabase n√£o precisa de encerramento expl√≠cito
        # mas podemos limpar vari√°veis globais se necess√°rio
        print("‚úÖ Conex√µes do database encerradas")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao encerrar conex√µes: {str(e)}")


async def health_check_database():
    """Verifica se o banco de dados est√° acess√≠vel."""
    try:
        # Teste b√°sico com Supabase
        response = supabase.table("empresas").select("empresa_id").limit(1).execute()
        return {
            "status": "healthy", 
            "message": "Database connection OK",
            "customers_management": _customers_management_available,
            "repositories": _repositories_available,
            "customer_repository": _customer_repository_available,
        }
    except Exception as e:
        return {"status": "unhealthy", "message": f"Database error: {str(e)}"}


# ========== EXPORTS PRINCIPAIS ==========
__all__ = [
    # Pagamentos
    "save_payment",
    "get_payment",
    "get_payment_by_txid",
    "update_payment_status",
    "update_payment_status_by_txid",
    "get_payments_by_cliente",  # üîß ADICIONADO
    
    # Empresas
    "save_empresa",
    "get_empresa",
    "get_empresa_by_token",
    "get_empresa_by_chave_pix",
    "get_empresa_config",
    
    # Cart√µes
    "save_tokenized_card",
    "get_tokenized_card",
    "delete_tokenized_card",
    "get_cards_by_cliente",  # üîß ADICIONADO
    
    # Certificados RSA
    "get_empresa_certificados",
    "save_empresa_certificados",
    
    # Gateways
    "atualizar_config_gateway",
    "get_empresa_gateways",
    
    # Sicredi
    "get_sicredi_token_or_refresh",
    
    # Asaas Customers
    "get_asaas_customer",
    "save_asaas_customer",
    "get_or_create_asaas_customer",
    
    # Storage
    "upload_cert_file",
    "download_cert_file",
    "ensure_folder_exists",
    "SUPABASE_BUCKET",
    
    # Cliente Supabase
    "supabase",
    
    # Inicializa√ß√£o/Desligamento
    "init_database",
    "shutdown_database",
    "health_check_database",
]

# ========== EXPORTS CONDICIONAIS ==========

# Customers Management
if _customers_management_available:
    __all__.extend([
        "get_or_create_cliente",
        "get_cliente_by_external_id",
        "get_cliente_by_cpf_cnpj",
        "get_cliente_by_email",
        "get_cliente_by_id",
        "create_or_update_endereco",
        "get_enderecos_cliente",
        "get_endereco_principal_cliente",
        "update_cliente",
        "list_clientes_empresa",
        "delete_cliente",
        "search_clientes",
        "get_cliente_stats_summary",
        "extract_customer_data_from_payment",
        # Fun√ß√µes auxiliares de clientes
        "extract_cpf_cnpj",
        "extract_nome",
        "extract_telefone",
        "has_address_data",
        "extract_address_data",
        "generate_external_id",
    ])

# üÜï NOVO: Implementa√ß√µes de Interface
if _repositories_available:
    __all__.extend([
        "PaymentRepository",
        "ConfigRepository",
        "CardRepository", 
        "AsaasCustomerRepository",
    ])

if _customer_repository_available:
    __all__.extend([
        "CustomerRepository",
        "CustomerService",
    ])

# üÜï NOVO: Adicionar fun√ß√µes para verificar disponibilidade
def is_customers_management_available() -> bool:
    """Verifica se o m√≥dulo customers_management est√° dispon√≠vel"""
    return _customers_management_available

def is_repositories_available() -> bool:
    """Verifica se as implementa√ß√µes de repository est√£o dispon√≠veis"""
    return _repositories_available

def is_customer_repository_available() -> bool:
    """Verifica se as implementa√ß√µes de customer repository est√£o dispon√≠veis"""
    return _customer_repository_available

# Adicionar verificadores aos exports
__all__.extend([
    "is_customers_management_available",
    "is_repositories_available", 
    "is_customer_repository_available",
])