# payment_kode_api/app/main.py

import os
from dotenv import load_dotenv; load_dotenv()  # üîπ Carrega vari√°veis do .env

from fastapi import FastAPI, Response
from payment_kode_api.app.api.routes import (
    payments_router,
    webhooks_router,
    empresas_router,
    upload_certificados_router,    # ‚úÖ Roteador de certificados
    auth_gateway_router,           # ‚úÖ Roteador para tokens Sicredi
    refunds_router                 # ‚úÖ Roteador de estornos
)
from payment_kode_api.app.core.config import settings
from payment_kode_api.app.core.error_handlers import add_error_handlers
from payment_kode_api.app.utilities.logging_config import logger

# üÜï NOVO: Import da rota de clientes
from payment_kode_api.app.api.routes.clientes import router as clientes_router

def create_app() -> FastAPI:
    debug_mode = settings.DEBUG if isinstance(settings.DEBUG, bool) else str(settings.DEBUG).lower() in ["true", "1"]

    app = FastAPI(
        title=getattr(settings, "APP_NAME", "Payment Kode API"),
        version="0.1.0",  # üîß Atualizada vers√£o para refletir novas funcionalidades
        description="API para gest√£o de pagamentos com fallback entre gateways e gerenciamento completo de clientes com endere√ßo",
        debug=debug_mode,
    )

    # üîπ Rotas principais da API
    app.include_router(payments_router, prefix="/payments", tags=["Pagamentos"])
    app.include_router(webhooks_router, prefix="/webhooks", tags=["Webhooks"])
    app.include_router(empresas_router, prefix="/empresas", tags=["Empresas"])
    app.include_router(upload_certificados_router, tags=["Certificados"])
    app.include_router(auth_gateway_router, tags=["Autentica√ß√£o"])
    app.include_router(refunds_router, prefix="/payments", tags=["Estornos"])
    
    # üÜï NOVA: Rota de clientes com gest√£o completa
    app.include_router(clientes_router, prefix="/api/v1", tags=["Clientes"])

    # üîπ Handlers de erro globais
    add_error_handlers(app)

    @app.on_event("startup")
    async def startup_event():
        logger.info("üöÄ Aplica√ß√£o iniciando...")
        logger.info("üì¶ Certificados Sicredi ser√£o carregados dinamicamente da mem√≥ria via Supabase Storage.")
        logger.info(f"‚úÖ API `{app.title}` vers√£o `{app.version}` inicializada!")
        logger.info(f"üîß Debug: {'Ativado' if app.debug else 'Desativado'}")
        
        # üÜï Log das novas funcionalidades
        logger.info("üÜï Nova funcionalidade: Gest√£o completa de clientes com endere√ßo ativada!")
        logger.info("üîó Rotas dispon√≠veis:")
        logger.info("   - Pagamentos PIX/Cart√£o com cria√ß√£o autom√°tica de cliente")
        logger.info("   - Tokeniza√ß√£o com dados completos do cliente")
        logger.info("   - CRUD completo de clientes e endere√ßos")
        logger.info("   - Relacionamentos: pagamentos, cart√µes, estat√≠sticas")

    @app.on_event("shutdown")
    async def shutdown_event():
        logger.info("üõë Aplica√ß√£o sendo encerrada...")

    @app.get("/", tags=["Health Check"])
    @app.head("/", tags=["Health Check"])
    async def health_check(response: Response):
        response.headers["Cache-Control"] = "no-cache"
        return {
            "status": "OK",
            "message": "Payment Kode API operacional",
            "version": "0.1.0",
            "features": [
                "Pagamentos PIX e Cart√£o de Cr√©dito",
                "Fallback autom√°tico entre gateways (Sicredi, Rede, Asaas)",
                "Cria√ß√£o autom√°tica de clientes com endere√ßo",
                "Tokeniza√ß√£o segura de cart√µes",
                "Sistema completo de estornos",
                "Webhooks em tempo real",
                "Gest√£o completa de clientes e endere√ßos",
                "Relacionamentos e estat√≠sticas de clientes"
            ],
            "gateways": {
                "pix": ["sicredi", "asaas"],
                "credit_card": ["rede", "asaas"]
            },
            "endpoints": {
                "payments": "/payments",
                "clients": "/api/v1/clientes",
                "tokenization": "/tokenize-card",
                "refunds": "/payments/refund",
                "webhooks": "/webhooks",
                "companies": "/empresas",
                "certificates": "/certificados",
                "auth": "/auth_gateway"
            },
            "api_local": settings.API_LOCAL,
            "environment": {
                "use_sandbox": settings.USE_SANDBOX,
                "sicredi_env": getattr(settings, 'SICREDI_ENV', 'production'),
                "debug": debug_mode
            }
        }

    # üÜï NOVO: Endpoint de documenta√ß√£o das funcionalidades de cliente
    @app.get("/api/v1/info", tags=["Documenta√ß√£o"])
    async def client_features_info():
        """
        Retorna informa√ß√µes sobre as funcionalidades de gest√£o de clientes.
        """
        return {
            "client_management": {
                "description": "Gest√£o completa de clientes com endere√ßos separados",
                "features": [
                    "Cria√ß√£o autom√°tica durante pagamentos e tokeniza√ß√£o",
                    "CRUD completo de clientes",
                    "Gest√£o de m√∫ltiplos endere√ßos por cliente",
                    "Relacionamentos com pagamentos e cart√µes",
                    "Estat√≠sticas e hist√≥rico de transa√ß√µes",
                    "Busca por UUID interno ou ID externo customizado"
                ]
            },
            "automatic_creation": {
                "description": "Cliente criado automaticamente quando dados suficientes fornecidos",
                "triggers": [
                    "Tokeniza√ß√£o de cart√£o com dados do cliente",
                    "Pagamento PIX com dados do devedor",
                    "Pagamento cart√£o com dados do portador"
                ],
                "required_fields": {
                    "minimum": ["nome"],
                    "recommended": ["nome", "email", "cpf_cnpj"],
                    "complete": ["nome", "email", "cpf_cnpj", "telefone", "endere√ßo_completo"]
                }
            },
            "search_priority": [
                "customer_external_id (se fornecido)",
                "cpf_cnpj (unique constraint)",
                "email (unique constraint)",
                "criar novo se n√£o encontrar"
            ],
            "database_structure": {
                "clientes": "Dados b√°sicos do cliente + customer_external_id",
                "enderecos": "Endere√ßos separados com FK para clientes.id",
                "cartoes_tokenizados": "Refer√™ncia customer_id (UUID) para clientes.id",
                "payments": "Nova coluna cliente_id (UUID) para clientes.id"
            }
        }

    return app

app = create_app()
__all__ = ["app", "create_app"]