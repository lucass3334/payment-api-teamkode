#!/bin/bash
set -e  # Para o script imediatamente em caso de erro

# üîß Fun√ß√£o de log colorido com timestamp
log() {
    local GREEN="\033[0;32m"
    local YELLOW="\033[0;33m"
    local RED="\033[0;31m"
    local NC="\033[0m"  # No Color
    local TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

    case $1 in
        info) echo -e "${GREEN}[INFO] ${TIMESTAMP}${NC} - $2" ;;
        warn) echo -e "${YELLOW}[WARN] ${TIMESTAMP}${NC} - $2" ;;
        error) echo -e "${RED}[ERROR] ${TIMESTAMP}${NC} - $2" ;;
    esac
}

log info "üîÑ Inicializando entrypoint..."

# ‚úÖ Garante permiss√µes para scripts √∫teis
chmod +x /app/docker-entrypoint.sh
chmod -R 755 /app/payment_kode_api/app/bugs_scripts

# ‚ùå REMOVE diret√≥rio /data/certificados (n√£o √© mais usado)
# O Supabase Storage cuida de tudo em mem√≥ria (via bytes), sem disco fixo

# üîí Verifica se vari√°veis de ambiente cr√≠ticas est√£o presentes
if [[ -z "$SUPABASE_URL" || -z "$SUPABASE_KEY" ]]; then
    log error "SUPABASE_URL ou SUPABASE_KEY n√£o foram definidas!"
    exit 1
fi

# üîÑ Aguarda Redis responder
log info "üîÑ Aguardando Redis estar dispon√≠vel..."
RETRIES=10
while [[ $RETRIES -gt 0 ]]; do
    if redis-cli -u "$REDIS_URL" ping | grep -q "PONG"; then
        log info "‚úÖ Redis est√° pronto!"
        break
    fi
    log warn "‚è≥ Redis ainda n√£o respondeu... Tentando novamente. Tentativas restantes: $RETRIES"
    sleep 5
    ((RETRIES--))
done

if [[ $RETRIES -eq 0 ]]; then
    log error "‚ùå Redis n√£o respondeu ap√≥s v√°rias tentativas!"
    exit 1
fi

# üîÑ Aguarda Supabase online
log info "üîÑ Verificando conex√£o com Supabase..."
SUPABASE_RETRIES=6
while [[ $SUPABASE_RETRIES -gt 0 ]]; do
    SUPABASE_STATUS=$(curl -s -o response.json -w "%{http_code}" "$SUPABASE_URL/rest/v1/" --header "apikey: $SUPABASE_KEY")

    if [[ "$SUPABASE_STATUS" -eq 200 ]] && [[ -s response.json ]] && grep -q "swagger" response.json; then
        log info "‚úÖ Supabase est√° acess√≠vel!"
        break
    fi

    log warn "‚è≥ Supabase n√£o respondeu (C√≥digo HTTP: $SUPABASE_STATUS). Tentando novamente..."
    sleep 5
    ((SUPABASE_RETRIES--))
done

if [[ $SUPABASE_RETRIES -eq 0 ]]; then
    log error "‚ùå Supabase n√£o respondeu corretamente ap√≥s v√°rias tentativas!"
    exit 1
fi

# üßº Trap para encerrar com eleg√¢ncia
trap 'log info "‚õî Encerrando aplica√ß√£o..."; exit 0' SIGTERM SIGINT

# üöÄ Inicializa√ß√£o final
if [[ "$1" == "worker" ]]; then
    log info "üöÄ Iniciando Celery Worker..."
    exec poetry run celery -A payment_kode_api.app.workers.tasks worker --loglevel=info --concurrency=4
else
    log info "üöÄ Iniciando API Web..."
    exec poetry run uvicorn payment_kode_api.app.main:app --host 0.0.0.0 --port 8080
fi
